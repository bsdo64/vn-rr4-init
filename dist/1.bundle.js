webpackJsonp([1],{"../node_modules/babel-loader/lib/index.js!./routes/page3/index.js":function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){return{state:e}}function i(e){return{increment:function(t){return e({type:"INCREMENT"})}}}Object.defineProperty(t,"__esModule",{value:!0});var a=r("../node_modules/react/react.js"),c=r.n(a),p=r("../node_modules/react-redux/es/index.js"),_=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),f=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return s(t,e),_(t,[{key:"render",value:function(){return c.a.createElement("div",null,"Page 3",this.props.state.get("posts").map(function(e,t){return c.a.createElement("div",{key:t},e.get("title"))}))}}]),t}(a.Component),l=p.b(u,i)(f);t.default=l;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(u,"mapStateToProps","/Users/dobyeongsu/projects/rr4-test/src/routes/page3/index.js"),__REACT_HOT_LOADER__.register(i,"mapDispatchToProps","/Users/dobyeongsu/projects/rr4-test/src/routes/page3/index.js"),__REACT_HOT_LOADER__.register(f,"Page3","/Users/dobyeongsu/projects/rr4-test/src/routes/page3/index.js"),__REACT_HOT_LOADER__.register(l,"default","/Users/dobyeongsu/projects/rr4-test/src/routes/page3/index.js"))}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,